source("supporting.r")
swiss_covid <- prep_data()
swiss_covid <- swiss_covid %>%
group_by(weekday) %>%
mutate(deseasoned = logEntries - mean(logEntries) + totMean)
library(dplyr)
swiss_covid <- swiss_covid %>%
group_by(weekday) %>%
mutate(deseasoned = logEntries - mean(logEntries) + totMean)
totMean <- mean(swiss_covid$logEntries)
swiss_covid$index <- 1:nrow(swiss_covid)
totMean <- mean(swiss_covid$logEntries)
swiss_covid <- swiss_covid %>%
group_by(weekday) %>%
mutate(deseasoned = logEntries - mean(logEntries) + totMean)
swiss_covid <- group_by(weekday) %>%
mutate(deseasoned = logEntries - mean(logEntries) + totMean)
swiss_covid <- group_by(weekday) %>%
mutate(deseasoned = logEntries - mean(logEntries) + totMean)
swiss_covid <- swiss_covid %>% group_by(weekday) %>%
mutate(deseasoned = logEntries - mean(logEntries) + totMean)
swiss_covid <- swiss_covid %>% group_by(weekday) %>%
mutate(deseasoned = logEntries - mean(logEntries) + totMean) %>%
pull(deseasoned)
swiss_covid <- prep_data()
swiss_covid$deseasoned <- swiss_covid %>% group_by(weekday) %>%
mutate(deseasoned = logEntries - mean(logEntries) + totMean) %>%
pull(deseasoned)
source("supporting.r")
swiss_covid <- prep_data()
swiss_covid %>%
ggplot() +
geom_point(aes(x=datum, y=logEntries), color="purple") +
geom_point(aes(x=datum, y=deseasoned), color="darkseagreen")
source("supporting.r")
swiss_covid <- prep_data()
# shuffle
shuffle <- sample(x = 1:nrow(swiss_covid), size = nrow(swiss_covid), replace = F)
train_shuffle <- swiss_covid[shuffle,] %>%
select(deseasoned)
library(ggplot2)
swiss_covid %>%
ggplot() +
geom_point(aes(x = datum, y = logEntries), color = "purple") +
geom_point(aes(x = datum, y = deseasoned), color = "darkseagreen")
# define folds
folds <- cut(seq(1, nrow(swiss_covid)), breaks = 5, labels = F)
# 5-fold cv
for(i in 1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- swiss_covid[-indices,] %>%
select(deseasoned)
test_fold <- swiss_covid[indices,] %>%
select(deseasoned)
}
# 5-fold cv
for(i in 1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- swiss_covid[-indices,] %>%
select(index, deseasoned)
test_fold <- swiss_covid[indices,] %>%
select(index, deseasoned)
for(span in seq(0.1, 0.9, 1)){
loessMod <- loess(deseasoned ~ index, data = train_fold, control = loess.control(surface = "direct"))
}
}
swiss_covid$index <- 1:numrow(swiss_covid)
swiss_covid$index <- 1:numrow(swiss_covid)
swiss_covid$index <- 1:nrow(swiss_covid)
# 5-fold cv
for(i in 1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- swiss_covid[-indices,] %>%
select(index, deseasoned)
test_fold <- swiss_covid[indices,] %>%
select(index, deseasoned)
for(span in seq(0.1, 0.9, 1)){
loessMod <- loess(deseasoned ~ index, data = train_fold, control = loess.control(surface = "direct"))
}
}
summary(loessMod)
# 5-fold cv
for(i in 1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- swiss_covid[-indices,] %>%
select(index, deseasoned)
test_fold <- swiss_covid[indices,] %>%
select(index, deseasoned)
for(span in seq(0.1, 0.9, 1)){
loessMod <- loess(deseasoned ~ index, data = train_fold, span = span,
control = loess.control(surface = "direct"))
}
}
summary(loessMod)
# shuffle
suffle <- sample(x = 1:nrow(swiss_covid), size = nrow(swiss_covid), replace = F)
# shuffle
suffle <- sample(x = 1:nrow(swiss_covid), size = nrow(swiss_covid), replace = F)
shuffledData <- swiss_covid[shuffle,] %>%
select(index, deseasoned)
# 5-fold cv
for(i in 1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- shuffledData[-indices,]
test_fold <- shuffledData[indices,]
for(span in seq(0.1, 0.9, 1)){
loessMod <- loess(deseasoned ~ index, data = train_fold, span = span,
control = loess.control(surface = "direct"))
}
}
summary(loessMod)
# predict on test_fold
pred <- predict(loessMod, test_fold)
# calculate RMSE and save
sqrt(mean(pred-test_fold$deseasoned))
pred
# predict on test_fold
pred <- unname(predict(loessMod, test_fold))
# calculate RMSE and save
sqrt(mean(pred-test_fold$deseasoned))
pred-test_fold$deseasoned
# calculate RMSE and save
sqrt(mean((pred-test_fold$deseasoned)^2))
# 5-fold cv
for(i in 1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- shuffledData[-indices,]
test_fold <- shuffledData[indices,]
for(span in seq(0.1, 0.9, 0.1)){
# fit model
loessMod <- loess(deseasoned ~ index, data = train_fold, span = span,
control = loess.control(surface = "direct"))
# predict on test_fold
pred <- unname(predict(loessMod, test_fold))
# calculate RMSE and save
sqrt(mean((pred-test_fold$deseasoned)^2))
}
}
# calculate RMSE and save
sqrt(mean((pred-test_fold$deseasoned)^2))
seq(0.1, 0.9, 0.1)
?loess
# 5-fold cv
for(i in  1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- shuffledData[-indices,]
test_fold <- shuffledData[indices,]
for(span in seq(0.05, 0.9, 0.05)){
# fit model
loessMod <- loess(deseasoned ~ index, data = train_fold, span = span,
control = loess.control(surface = "direct"))
# predict on test_fold
pred <- unname(predict(loessMod, test_fold))
# calculate RMSE and save
sqrt(mean((pred-test_fold$deseasoned)^2))
}
}
rmseList <- c()
spanList <- seq(0.05, 0.9, 0.05)
# 5-fold cv
for(i in  1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- shuffledData[-indices,]
test_fold <- shuffledData[indices,]
for(span in spanList){
# fit model
loessMod <- loess(deseasoned ~ index, data = train_fold, span = span,
control = loess.control(surface = "direct"))
# predict on test_fold
pred <- unname(predict(loessMod, test_fold))
# calculate RMSE and save
rmseList <- append(rmseList, sqrt(mean((pred-test_fold$deseasoned)^2)))
}
}
rmseList <- c()
spanList <- seq(0.025, 0.9, 0.025)
# 5-fold cv
for(i in  1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- shuffledData[-indices,]
test_fold <- shuffledData[indices,]
for(span in spanList){
# fit model
loessMod <- loess(deseasoned ~ index, data = train_fold, span = span,
control = loess.control(surface = "direct"))
# predict on test_fold
pred <- unname(predict(loessMod, test_fold))
# calculate RMSE and save
rmseList <- append(rmseList, sqrt(mean((pred-test_fold$deseasoned)^2)))
}
}
rmseList <- c()
spanList <- seq(0.0125, 0.1, 0.0125)
# 5-fold cv
for(i in  1:5){
# define the indices for train/test split
indices <- which(folds == i, arr.ind = T)
train_fold <- shuffledData[-indices,]
test_fold <- shuffledData[indices,]
for(span in spanList){
# fit model
loessMod <- loess(deseasoned ~ index, data = train_fold, span = span,
control = loess.control(surface = "direct"))
# predict on test_fold
pred <- unname(predict(loessMod, test_fold))
# calculate RMSE and save
rmseList <- append(rmseList, sqrt(mean((pred-test_fold$deseasoned)^2)))
}
}
rep(1, length(spanList))
rep(1:5)
rep(1:5, each = length(spanList))
rep(spanList, 5)
resultDf <- data.frame(fold = rep(1:5, each = length(spanList)), span = rep(spanList, 5), rmse = rmseList)
resultDf %>% groupby(fold) %>% mean()
resultDf %>% group_by(fold) %>% mean()
resultDf %>% group_by(fold) %>% mean(rmse)
resultDf %>% group_by(fold) %>% summarise_at(vars(rmse), list(name = mean))
resultDf %>% group_by(fold) %>% summarise_at(vars(span), list(name = mean))
resultDf %>% group_by(span) %>% summarise_at(vars(fold), list(mean))
resultDf %>% group_by(span) %>% summarise_at(vars(rmse), list(mean))
0.0125*760
swiss_covid <- prep_data()
source("supporting.r")
library(ggplot2)
swiss_covid <- prep_data()
source("supporting.r")
source("supporting.r")
library(ggplot2)
swiss_covid <- load_data()
swiss_covid %>%
ggplot() +
geom_point(aes(x = datum, y = logEntries), color = "purple") +
geom_point(aes(x = datum, y = deseasoned), color = "darkseagreen")
# hyperparameter tuning: span
swiss_covid <- prep_data(swiss_covid)
source("supporting.r")
# hyperparameter tuning: span
swiss_covid_shuffled <- prep_data(swiss_covid)
spanList <- seq(1, 21, 1)/763
blub <- swiss_covid[-1,]
source("supporting.r")
resultDf <- tune_span(swiss_covid_shuffled)
source("supporting.r")
resultDf <- tune_span(swiss_covid_shuffled)
resultDf %>% group_by(span) %>% summarise_at(vars(rmse), list(mean))
blub <- swiss_covid %>%
filter(fold == 1)
blub <- swiss_covid %>%
filter(fold != 1)
resultDf <- tune_span(swiss_covid_shuffled)
resultDf %>% group_by(span) %>% summarise_at(vars(rmse), list(mean))
source("supporting.r")
resultDf <- tune_span(swiss_covid_shuffled)
resultDf %>% group_by(span) %>% summarise_at(vars(rmse), list(mean))
resultDf
resultDf %>%
filter(fold == 1) %>%
select(span, rmse)
resultDf %>%
filter(fold == 1) %>%
select(rmse)
resultDf %>%
filter(fold == 1) %>%
select(rmse) %>%
unname()
shiny::runApp()
runApp()
runApp()
runApp()
resultDf %>% group_by(span) %>% summarise_at(vars(rmse), list(mean))
meanDf <- resultDf %>% group_by(span) %>% summarise_at(vars(rmse), list(mean))
meanDf %>% min()
min(meanDf$rmse)
imin(meanDf$rmse)
which.min(meanDf$rmse)
meanDf$span[which.min(meanDf$rmse)]
runApp()
runApp()
source("supporting.r")
spanOpt <- tune_span(swiss_covid_shuffled)
loessMod <- loess(deseasoned ~ index, swiss_covid, span = 29/763)
loessMod$fitted
runApp()
data.frame(datum = swiss_covid$datum, obs = swiss_covid$deseasoned, mod = loessMod$fitted) %>%
ggplot() +
geom_line(aes(x = datum, y = mod)) +
geom_point(aes(x = datum, y = obs))
data.frame(datum = swiss_covid$datum, obs = swiss_covid$deseasoned, mod = loessMod$fitted) %>%
ggplot() +
geom_line(aes(x = datum, y = mod)) +
geom_point(aes(x = datum, y = obs))
data.frame(datum = swiss_covid$datum, obs = swiss_covid$deseasoned, mod = loessMod$fitted) %>%
filter(datum >= "2022-01-01")
data.frame(datum = swiss_covid$datum, obs = swiss_covid$deseasoned, mod = loessMod$fitted) %>%
filter(datum >= "2022-01-01") %>%
ggplot() +
geom_line(aes(x = datum, y = mod)) +
geom_point(aes(x = datum, y = obs))
predit(loessMod, index=764)
predict(loessMod, index=764)
predict(loessMod, 764)
loessMod <- loess(deseasoned ~ index, swiss_covid, span = 29/763, control = loess.control(surface = "direct"))
data.frame(datum = swiss_covid$datum, obs = swiss_covid$deseasoned, mod = loessMod$fitted) %>%
filter(datum >= "2022-01-01") %>%
ggplot() +
geom_line(aes(x = datum, y = mod)) +
geom_point(aes(x = datum, y = obs))
data.frame(datum = swiss_covid$datum, obs = swiss_covid$deseasoned, mod = loessMod$fitted) %>%
filter(datum >= "2022-01-01") %>%
ggplot() +
geom_line(aes(x = datum, y = mod)) +
geom_point(aes(x = datum, y = obs))
predict(loessMod, 764)
modOut <- predict(loessMod, 764)
swiss_covid$datum[-1]
swiss_covid$datum[-1,]
swiss_covid$datum[,-1]
tail(swiss_covid$datum, 1)
swiss_covid <- load_data()
tail(swiss_covid$datum, 1)
tail(swiss_covid$datum, 1) + 1
weekday(tail(swiss_covid$datum, 1) + 1)
weekdays(tail(swiss_covid$datum, 1) + 1)
tail(swiss_covid$datum, 1) + 1
swiss_covid %>%
swiss_covid %>% filter(weekday == tail(swiss_covid$datum, 1) + 1) %>%
mean()
swiss_covid %>% filter(weekday == tail(swiss_covid$datum, 1) + 1)
swiss_covid %>% filter(weekday == weekdays(tail(swiss_covid$datum, 1) + 1))
swiss_covid %>% filter(weekday == weekdays(tail(swiss_covid$datum, 1) + 1)) %>%
mean()
swiss_covid %>% filter(weekday == weekdays(tail(swiss_covid$datum, 1) + 1)) %>%
select(deseasoned) %>%
mean()
swiss_covid %>% filter(weekday == weekdays(tail(swiss_covid$datum, 1) + 1)) %>%
select(deseasoned)
swiss_covid %>% filter(weekday == weekdays(tail(swiss_covid$datum, 1) + 1)) %>%
select(deseasoned) %>%
pull()
swiss_covid %>% filter(weekday == weekdays(tail(swiss_covid$datum, 1) + 1)) %>%
select(deseasoned) %>%
pull() %>%
mean()
dailyMean <- swiss_covid %>% filter(weekday == weekdays(tail(swiss_covid$datum, 1) + 1)) %>%
select(deseasoned) %>%
pull() %>%
mean()
totMean <- swiss_covid %>%
select(deseasoned) %>%
pull() %>%
mean()
exp(modOut - totMean + dailyMean)
runApp()
runApp()
runApp()
swiss_covid <- load_data()
source("supporting.r")
library(ggplot2)
swiss_covid <- load_data()
# and prepare for later
swiss_covid_prepared <- prep_data(swiss_covid, numFolds = 5)
# calculate the optimumSpan for the LOESS modell
minSpan <- reactive(input$loessSpan[1])
maxSpan <- reactive(input$loessSpan[2])
runApp()
# calculate the optimumSpan for the LOESS modell
minSpan <- 5
maxSpan <- 30
optSpan <- tune_span(swiss_covid_prepared, numFolds = 5, minDaysSpan = minSpan, maxDaysSpan = maxSpan)
maxSpan <- 60
optSpan <- tune_span(swiss_covid_prepared, numFolds = 5, minDaysSpan = minSpan, maxDaysSpan = maxSpan)
loessMod <- loess(deseasoned ~ index, data = swiss_covid, span = optSpan/nrow(swiss_covid),
control = loess.control(surface = "direct"))
# plot
loessPlot <- data.frame(datum = swiss_covid$datum, obs = swiss_covid$deseasoned, mod = loessMod$fitted) %>%
filter(datum >= "2022-01-01") %>%
ggplot() +
geom_line(aes(x = datum, y = mod)) +
geom_point(aes(x = datum, y = obs))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?loess
runApp()
url <- get_url()
data <- url %>%
read.csv
names(data)
data$entries_neu_gemeldet
tail(data$entries_neu_gemeldet)
tail(data$pop)
tail(data)
names(swiss_covid)
names(data)
tail(data$offset_Phase2)
tail(data$offset_Phase6)
tail(data$offset_last14d)
tail(data$sumTotal)
tail(data$sumTotal[2:-1]-data$sumTotal[1:-2])
diff(data$sumTotal, lag=1)
tail(diff(data$sumTotal, lag=1))
max(diff(data$sumTotal))
data <- url %>%
read.csv %>%
filter(geoRegion == "CHFL")
source("supporting.r")
data <- url %>%
read.csv %>%
filter(geoRegion == "CHFL")
tail(diff(data$sumTotal, lag=1))
url <- get_url()
data <- url %>%
read.csv %>%
filter(geoRegion == "CHFL")
tail(diff(data$sumTotal, lag=1))
tail(data$offset_last14d)
tail(data$entries_diff_last)
tail(data$entries_diff_last_age)
tail(data$entries_letzter_stand)
tail(data)
96582-87221
55+172+358+7153+9343+17
tail(diff(data$sumTotal))
tail(diff(data$entries_letzter_stand))
shiny::runApp()
runApp()
runApp()
swiss_covid <- load_data()
tail(swiss_covid$datum)
loessMod <- loess(deseasoned ~ index, swiss_covid, span = 29/763, control = loess.control(surface = "direct"))
predict(loessMod, 1:766)
runApp()
tail(swiss_covid$datum, 1)+1
runApp()
runApp()
library(np)
install.packages("np")
library(np)
?npreg
shiny::runApp()
runApp()
npreg(deseasoned ~index, data=swiss_covid)
npMod <- npreg(deseasoned ~index, data=swiss_covid)
runApp()
npMod$eval
predict(npMod, data = swiss_covid)
sqrt(mean((predict(npMod, swiss_covid)-test_fold$deseasoned)^2))
sqrt(mean((predict(npMod, swiss_covid)-swiss_covid$deseasoned)^2))
predict(npMod, swiss_covid)
sqrt(mean((predict(npMod, data = swiss_covid)-swiss_covid$deseasoned)^2))
shiny::runApp()
url
get_url()
swiss_covid <- load_data()
tail(swiss_covid)
runApp()
runApp()
View(data)
data <- url %>%
read.csv
View(data)
data$entries_diff_last
url
# https://www.covid19.admin.ch/api/data/20220330-x7zv6jkb/sources/COVID19Cases_geoRegion.csv
url <- get_url()
source("supporting.r")
# https://www.covid19.admin.ch/api/data/20220330-x7zv6jkb/sources/COVID19Cases_geoRegion.csv
url <- get_url()
rul
url
wget
0
O
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
tail(swiss_covid$datum)
tail(swiss_covid$datum, 1)
weekdays(tail(swiss_covid$datum, 1))
predict(loessMod, nrow(data)+1)
loessMod <- loess(deseasoned ~ index, swiss_covid, span = 29/763, control = loess.control(surface = "direct"))
predict(loessMod, nrow(data)+1)
runApp()
predict(loessMod, nrow(data)+1)
predict(loessMod, nrow(swiss_covid)+1)
nrow(swiss_covid) + 1:3
predict(loessMod, nrow(swiss_covid)+1:3)
predLogValue <- predict(loessMod, nrow(swiss_covid)+1:3)
seasonalize(predLogValue, date = tail(swiss_covid$datum)+1, data=swiss_covid)
for(predValue in predValue){print(predValue)}
for(value in predLogValue){print(val)}
for(value in predLogValue){print(value)}
runApp()
runApp()
runApp()
runApp()
